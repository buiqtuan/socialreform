// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  displayName String
  password    String
  avatar      String?
  bio         String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts           Post[]
  socialAccounts  SocialAccount[]
  notifications   Notification[]
  mediaFiles      MediaFile[]
  teamMemberships TeamMember[]
  userSettings    UserSettings?

  @@map("users")
}

model SocialAccount {
  id                String   @id @default(cuid())
  userId            String
  platform          String
  platformUserId    String
  platformUsername  String
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_accounts")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  mediaUrls   String[]
  scheduledAt DateTime?
  publishedAt DateTime?
  status      String   @default("draft")
  platforms   String[]
  hashtags    String[]
  mentions    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics Analytics[]

  @@map("posts")
}

model Analytics {
  id               String   @id @default(cuid())
  postId           String
  platform         String
  views            Int      @default(0)
  likes            Int      @default(0)
  comments         Int      @default(0)
  shares           Int      @default(0)
  clickThroughRate Float    @default(0)
  engagementRate   Float    @default(0)
  impressions      Int      @default(0)
  reach            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform])
  @@map("analytics")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model MediaFile {
  id           String   @id @default(cuid())
  userId       String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  duration     Int?
  width        Int?
  height       Int?
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media_files")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id          String   @id @default(cuid())
  userId      String
  teamId      String
  role        String
  permissions String[]
  invitedAt   DateTime @default(now())
  joinedAt    DateTime?
  status      String   @default("pending")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique

  // Notification settings
  emailNotifications         Boolean @default(true)
  pushNotifications         Boolean @default(true)
  postPublishedNotifications Boolean @default(true)
  postFailedNotifications   Boolean @default(true)
  scheduledReminderNotifications Boolean @default(true)
  weeklyReportNotifications Boolean @default(true)

  // Privacy settings
  profileVisibility String  @default("public")
  showEmail         Boolean @default(false)
  showStats         Boolean @default(true)

  // Preferences
  theme            String   @default("system")
  language         String   @default("en")
  timezone         String   @default("UTC")
  defaultPlatforms String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model DeviceToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String // ios, android, web
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("device_tokens")
}
